import { NgModule } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { readFirst } from '@nrwl/angular/testing';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule, Store } from '@ngrx/store';
import { NxModule } from '@nrwl/angular';
import { <%= className %>Effects } from './<%= fileName %>.effects';
import { <%= className %>Facade } from './<%= fileName %>.facade';
import * as <%= className %>Actions from './<%= fileName %>.actions';
import {
  <%= className.toUpperCase() %>_FEATURE_KEY,
  <%= className %>State,
  initial<%= className %>State,
  reducer
} from './<%= fileName %>.reducer';

interface TestSchema {
  <%= propertyName %>: <%= className %>State;
}

describe('<%= className %>Facade', () => {
  let facade: <%= className %>Facade;
  let store: Store<TestSchema>;

  beforeEach(() => {});

  describe('used in NgModule', () => {
    beforeEach(() => {
      @NgModule({
        imports: [
          StoreModule.forFeature(<%= className.toUpperCase() %>_FEATURE_KEY, reducer),
          EffectsModule.forFeature([<%= className %>Effects])
        ],
        providers: [<%= className %>Facade]
      })
      class CustomFeatureModule {}

      @NgModule({
        imports: [
          NxModule.forRoot(),
          StoreModule.forRoot({}),
          EffectsModule.forRoot([]),
          CustomFeatureModule
        ]
      })
      class RootModule {}
      TestBed.configureTestingModule({ imports: [RootModule] });

      store = TestBed.get(Store);
      facade = TestBed.get(<%= className %>Facade);
    });

    /**
     * The initially generated facade::loadAll() returns empty array
     */
    it('loadAll() should return empty list with loaded == true', async done => {
      try {
        let list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(0);

        facade.loadAll();

        list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(0);

        done();
      } catch (err) {
        done.fail(err);
      }
    });

    /**
     * Use `load<%= className %>Success` to manually update list
     */
    it('all<%= className %>$ should return the loaded list; and loaded flag == true', async done => {
      try {
        let list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(0);

        list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(2);

        done();
      } catch (err) {
        done.fail(err);
      }
    });
  });
});

