import { <%= className %> } from './<%= fileName %>.models';
import { <%= className %>State, <%= propertyName %>Adapter, initial<%= className %>State } from './<%= fileName %>.reducer';
import * as <%= className %>Selectors from './<%= fileName %>.selectors';

describe('<%= className %> Selectors', () => {
  const ERROR_MSG = 'No Error Available';
  const get<%= className %>Id = it => it['id'];
  const create<%= className %>Entity = (id: string, name = '') =>
    ({
      id,
      name: name || `name-${id}`
    } as <%= className %> );

  let state;

  beforeEach(() => {
    state = {
      "<%= propertyName %>": <%= propertyName %>Adapter.addAll(
        [
          create<%= className %>Entity('PRODUCT-AAA'),
          create<%= className %>Entity('PRODUCT-BBB'),
          create<%= className %>Entity('PRODUCT-CCC')
        ],
        {
          ...initial<%= className %>State,
          selectedId: 'PRODUCT-BBB',
          error: ERROR_MSG,
          loaded: true
        }
      )
    };
  });

  describe('<%= className %> Selectors', () => {
    it('getAll<%= className %>() should return the list of <%= className %>', () => {
      const results = <%= className %>Selectors.selectAll<%= className %>s(state);
      const selId = get<%= className %>Id(results[1]);

      expect(results.length).toBe(3);
      expect(selId).toBe('PRODUCT-BBB');
    });

    it('getSelected() should return the selected Entity', () => {
      const result = <%= className %>Selectors.selectCurrent<%= className %>(state);
      const selId = get<%= className %>Id(result);

      expect(selId).toBe('PRODUCT-BBB');
    });

  });
});

